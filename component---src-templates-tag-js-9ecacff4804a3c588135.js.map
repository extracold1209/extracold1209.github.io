{"version":3,"sources":["webpack:///./src/components/Sidebar/Friend/index.js","webpack:///./src/components/Sidebar/LatestPost/index.js","webpack:///./src/components/Sidebar/Information/index.js","webpack:///./src/components/Sidebar/index.js","webpack:///./src/components/Tag/index.js","webpack:///./src/templates/tag.js","webpack:///./src/api/images.js","webpack:///./src/components/Card/index.tsx","webpack:///./src/components/SEO/index.js"],"names":["config","friends","Friend","className","map","friend","ExternalLink","href","title","key","rel","LatestPost","posts","node","to","frontmatter","url","slug","fields","Information","totalCount","defaultProps","wordings","githubUsername","email","iconUrl","about","Icon","icon","target","Sidebar","latestPosts","src","alt","query","render","data","all","limited","Tag","name","count","TagPage","pageContext","edges","allMarkdownRemark","tag","style","margin","fontSize","length","id","siteTitleAlt","isPost","description","image","pageQuery","parseImgur","rawImage","size","match","resizedImage","replace","small","medium","large","huge","parseImageTag","text","parseTitle","module","exports","getGalleryImage","CardHeader","backgroundColor","backgroundImage","Card","date","headerImage","headerBackgroundColor","tags","split","SEO","content","type","JSON","stringify","alternateName","itemListElement","position","item","headline","schemaOrgJSONLD","property","siteFBAppID","twitter_username"],"mappings":"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","file":"component---src-templates-tag-js-9ecacff4804a3c588135.js","sourcesContent":["import React from 'react';\n\nimport ExternalLink from '../../ExternalLink';\n\nimport { config } from '../../../../data';\n\nimport './index.scss';\n\nconst { friends = [] } = config;\n\nconst Friend = () => (\n  <div className=\"friend\">\n    <p>Links</p>\n    {friends.map(friend => (\n      <ExternalLink\n        href={friend.href}\n        title={friend.title}\n        key={friend.title}\n        rel=\"noopener\"\n      />\n    ))}\n  </div>\n);\n\nexport default Friend;\n","import React from 'react';\n\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nconst LatestPost = ({ posts }) => (\n  <div className=\"latest-post\">\n    <p>Recent Post</p>\n    {posts.map(({ node }) => (\n      <Link\n        to={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n        key={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n        href={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n      >\n        {node.frontmatter.title}\n      </Link>\n    ))}\n  </div>\n);\n\nLatestPost.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default LatestPost;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Friend from '../Friend';\nimport LatestPost from '../LatestPost';\nimport './index.scss';\n\n// eslint-disable-next-line react/prop-types\nconst Information = ({ totalCount, posts }) => (\n  <div className=\"d-none d-lg-block information my-2\">\n    <hr />\n    <p>\n      Total&nbsp;\n      {totalCount}\n      &nbsp;posts\n    </p>\n    <hr />\n    <LatestPost posts={posts} />\n    <hr />\n    <Friend />\n  </div>\n);\n\nInformation.propTypes = {\n  totalCount: PropTypes.number.isRequired,\n  posts: PropTypes.array,\n};\n\nInformation.defaultProps = {\n  posts: [],\n};\n\nexport default Information;\n","import React from 'react';\nimport { graphql, Link, StaticQuery } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { config } from '../../../data';\n\nimport Information from './Information';\n\nimport './index.scss';\n\nconst {\n  wordings = [],\n  githubUsername,\n  email,\n  iconUrl,\n  about,\n} = config;\n\nconst Icon = ({ href, icon }) => (\n  <a\n    target=\"_blank\"\n    href={href}\n    rel=\"external nofollow noopener noreferrer\"\n    className=\"custom-icon\"\n  >\n    <span className=\"fa-layers fa-fw fa-2x\">\n      <FontAwesomeIcon icon={icon} />\n    </span>\n  </a>\n);\n\nconst Sidebar = ({ totalCount, latestPosts }) => (\n  <header className=\"intro-header site-heading text-center col-xl-2 col-lg-3 col-xs-12 order-lg-1\">\n    <div className=\"about-me\">\n      <Link to={about} href={about} className=\"name\">\n        <img className=\"avatar\" src={iconUrl} alt=\"extracold1209\" />\n        <h4>ExtraCold</h4>\n      </Link>\n      <p className=\"mb-1\">{wordings[0]}</p>\n      <p className=\"mb-3\">{wordings[1]}</p>\n      <Icon\n        href={`https://github.com/${githubUsername}`}\n        icon={['fab', 'github']}\n      />\n      <Icon href={`mailto:${email}`} icon={['far', 'envelope']} />\n      <Information totalCount={totalCount} posts={latestPosts} />\n    </div>\n  </header>\n);\n\nIcon.propTypes = {\n  href: PropTypes.string.isRequired,\n  icon: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nSidebar.propTypes = {\n  totalCount: PropTypes.number,\n  latestPosts: PropTypes.array, //eslint-disable-line\n};\n\nSidebar.defaultProps = {\n  totalCount: 0,\n  latestPosts: [],\n};\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      fragment cardData on MarkdownRemark {\n        fields {\n          slug\n        }\n        frontmatter {\n          id\n          title\n          url: slug\n          date\n          tags\n          description\n          headerImage\n        }\n      }\n\n      query SidebarQuery {\n        all: allMarkdownRemark {\n          totalCount\n        }\n\n        limited: allMarkdownRemark(\n          sort: { order: DESC, fields: frontmatter___date }\n          limit: 6\n        ) {\n          latestPosts: edges {\n            node {\n              ...cardData\n            }\n          }\n        }\n      }\n    `}\n    render={(data) => <Sidebar {...data.all} {...data.limited} />}\n  />\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Tag = ({ name, count }) => (\n  <a href={`/tag/${name}`} className=\"header-tag\">\n    {name}\n    &nbsp;\n    {count}\n  </a>\n);\n\nTag.propTypes = {\n  name: PropTypes.string.isRequired,\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nTag.defaultProps = {\n  count: '',\n};\n\nexport default Tag;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Card from '../components/Card';\nimport SEO from '../components/SEO';\nimport Sidebar from '../components/Sidebar';\n\n// eslint-disable-next-line react/prop-types\nconst TagPage = ({ data, pageContext }) => {\n  const { edges } = data.allMarkdownRemark;\n  const { tag } = pageContext;\n  return (\n    <div className=\"container\">\n      <div\n        className=\"row\"\n        style={{\n          margin: 15,\n        }}\n      >\n        <Sidebar />\n\n        <div className=\"col-xl-10 col-lg-7 col-md-12 col-xs-12 order-2\">\n          <div\n            className=\"col-12\"\n            style={{\n              fontSize: 20,\n              margin: 15,\n            }}\n          >\n            {edges.length}\n            &nbsp;Articles in&nbsp;\n            {tag}\n          </div>\n          {edges.map(({ node }) => (\n            <Card {...node.frontmatter} key={node.id} />\n          ))}\n        </div>\n\n        <div className=\"col-xl-2 col-lg-1 order-3\" />\n      </div>\n\n      <SEO\n        title={tag}\n        url={`/tag/${tag}`}\n        siteTitleAlt=\"Calpa's Blog\"\n        isPost={false}\n        description={tag}\n        image=\"https://i.imgur.com/M795H8A.jpg\"\n      />\n    </div>\n  );\n};\n\nexport default TagPage;\n\nexport const pageQuery = graphql`\n  query tagQuery($tag: [String!]) {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: frontmatter___date }\n      filter: { frontmatter: { tags: { in: $tag } } }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            id\n            url: slug\n            title\n            date\n            tags\n            headerImage\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n","// s = Small Square (90×90)\n// b = Big Square (160×160)\n// t = Small Thumbnail (160×160)\n// m = Medium Thumbnail (320×320)\n// l = Large Thumbnail (640×640)\n// h = Huge Thumbnail (1024×1024)\nconst defaultPicture = 'M795H8A.jpg';\n\nconst parseImgur = (rawImage, size = 'large') => {\n  if (!rawImage) {\n    return `https://i.imgur.com/${defaultPicture}`;\n  }\n\n  const mapping = {\n    'small-square': 's',\n    'big-square': 'b',\n    small: 't',\n    medium: 'm',\n    large: 'l',\n    huge: 'h',\n  };\n\n  // Don't resize the png image\n  // as there is a transparent bug in imgur\n  if (rawImage.match('(png)|(gif)')) {\n    // Prevent double http url\n    if (rawImage.match('http')) {\n      return rawImage;\n    }\n    return `https://i.imgur.com/${rawImage}`;\n  }\n\n  const resizedImage = rawImage.replace(/(.*)\\.(.*)/, `$1${mapping[size]}.$2`);\n  // Prevent double http url\n  if (resizedImage.match('http')) {\n    return resizedImage;\n  }\n  return `https://i.imgur.com/${resizedImage}`;\n};\n\nconst parseTitle = (title, text) => `title=\"${title || text}\"`;\n\nconst parseImageTag = ({ href, title, text }) => `<img class=\"lozad d-block mx-auto\" data-src=${parseImgur(\n  href,\n  'large',\n)} ${parseTitle(title, text)} />`;\n\nconst getGalleryImage = ({ href, title, text }) => `<a data-fancybox=\"gallery\" href=\"${parseImgur(\n  href,\n  'huge',\n)}\">${parseImageTag({ href, title, text })}</a>`;\n\nmodule.exports = {\n  parseImgur,\n  parseImageTag,\n  getGalleryImage,\n};\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport Tag from '../Tag';\nimport { parseImgur } from '../../api/images';\n\nimport './index.scss';\n\ninterface IProps {\n  title: string;\n  date: string;\n  url: string\n  headerImage?: string\n  headerBackgroundColor?: string;\n  description?: string;\n  tags?: string[];\n}\n\nconst CardHeader: React.FC<{url: string, image: string; backgroundColor: string}> = ({ url, image, backgroundColor }) => (\n  <Link to={url}>\n    <div className=\"wrapper\" style={{\n      backgroundColor: `#${backgroundColor}`,\n      backgroundImage: ` url(${parseImgur(image, 'large')})`,\n    }}/>\n  </Link>\n);\n\nconst Card: React.FC<IProps> = ({\n  title,\n  date,\n  url,\n  headerImage,\n  headerBackgroundColor,\n  description,\n  tags = [],\n}) => (\n  <div className=\"col-sm-12 pb-4\">\n    <div className=\"custom-card\">\n      {headerImage && (\n        <CardHeader\n          url={url}\n          image={headerImage}\n          backgroundColor={headerBackgroundColor || 'FFFFFF'}\n        />\n      )}\n      <div className=\"data\">\n        <div className=\"content\">\n          <div className=\"stats\">\n            <span className=\"date\">{date.split('T')[0]}</span>\n            {tags.map((name: string) => (\n              <Tag name={name} key={name}/>\n            ))}\n          </div>\n          <Link to={url}>\n            <h4 className=\"title\">{title}</h4>\n            <p>{description}</p>\n          </Link>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React from 'react';\nimport Helmet from 'react-helmet';\n\nimport PropTypes from 'prop-types';\n\nimport config from '../../../data';\n\nconst schemaOrgJSONLD = ({\n  url,\n  title,\n  siteTitleAlt,\n  isPost,\n  image,\n  description,\n}) => [\n  {\n    '@context': 'http://schema.org',\n    '@type': 'WebSite',\n    url,\n    name: title,\n    alternateName: siteTitleAlt || '',\n  },\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: [\n        {\n          '@type': 'ListItem',\n          position: 1,\n          item: {\n            '@id': url,\n            name: title,\n            image,\n          },\n        },\n      ],\n    }\n    : '',\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BlogPosting',\n      url,\n      name: title,\n      alternateName: siteTitleAlt || '',\n      headline: title,\n      image: {\n        '@type': 'ImageObject',\n        url: image,\n      },\n      description,\n    }\n    : '',\n];\n\nconst SEO = ({\n  url, title, description, image, siteTitleAlt, isPost,\n}) => (\n  <Helmet>\n    <title>{title}</title>\n\n    {/* General tags */}\n    <meta name=\"description\" content={description} />\n    <meta name=\"image\" content={image} />\n\n    {/* Schema.org tags */}\n    <script type=\"application/ld+json\">\n      {JSON.stringify(schemaOrgJSONLD(url, title, siteTitleAlt, isPost))}\n    </script>\n\n    {/* OpenGraph tags */}\n    <meta property=\"og:url\" content={url} />\n    {isPost ? (\n      <meta property=\"og:type\" content=\"article\" />\n    ) : (\n      <meta property=\"og:type\" content=\"website\" />\n    )}\n    <meta property=\"og:title\" content={title} />\n    <meta property=\"og:description\" content={description} />\n    <meta property=\"og:image\" content={image} />\n    <meta\n      property=\"fb:app_id\"\n      content={config.siteFBAppID ? config.siteFBAppID : ''}\n    />\n\n    {/* Twitter Card tags */}\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta\n      name=\"twitter:creator\"\n      content={config.twitter_username ? config.twitter_username : ''}\n    />\n    <meta name=\"twitter:title\" content={title} />\n    <meta name=\"twitter:description\" content={description} />\n    <meta name=\"twitter:image\" content={image} />\n  </Helmet>\n);\n\nSEO.propTypes = {\n  url: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  siteTitleAlt: PropTypes.string.isRequired,\n  isPost: PropTypes.bool.isRequired,\n};\n\nSEO.defaultProps = {\n  title: config.title,\n};\n\nexport default SEO;\n"],"sourceRoot":""}