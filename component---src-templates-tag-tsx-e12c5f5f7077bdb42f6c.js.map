{"version":3,"sources":["webpack:///./src/templates/tag.tsx","webpack:///./src/components/Card/index.tsx"],"names":["TagPage","data","pageContext","edges","allMarkdownRemark","tag","className","style","margin","fontSize","length","map","node","frontmatter","key","id","title","url","siteTitleAlt","isPost","description","image","pageQuery","CardHeader","backgroundColor","to","backgroundSize","backgroundImage","Card","date","headerImage","headerBackgroundColor","tags","split","name"],"mappings":"mNAmDeA,UA7C4C,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACxDC,EAAUF,EAAKG,kBAAfD,MACAE,EAAQH,EAARG,IACR,OACI,yBAAKC,UAAU,aACX,yBACIA,UAAU,MACVC,MAAO,CACHC,OAAQ,KAGZ,kBAAC,IAAD,MAEA,yBAAKF,UAAU,kDACX,yBACIA,UAAU,SACVC,MAAO,CACHE,SAAU,GACVD,OAAQ,KAGXL,EAAMO,OAPX,gBASKL,GAEJF,EAAMQ,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACP,kBAAC,IAAD,iBAAUA,EAAKC,YAAf,CAA4BC,IAAKF,EAAKG,UAI9C,yBAAKT,UAAU,+BAGnB,kBAAC,IAAD,CACIU,MAAOX,EACPY,IAAG,QAAUZ,EACba,aAAa,mBACbC,QAAQ,EACRC,YAAaf,EACbgB,MAAM,kCAWf,IAAMC,EAAY,a,6FCvCnBC,G,UAA8E,SAAC,GAAD,IAAGN,EAAH,EAAGA,IAAKI,EAAR,EAAQA,MAAOG,EAAf,EAAeA,gBAAf,OAClF,kBAAC,OAAD,CAAMC,GAAIR,GACR,yBAAKX,UAAU,UAAUC,MAAO,CAC9BmB,eAAgB,QAChBF,gBAAiB,IAAIA,EACrBG,gBAAiB,OAAON,EAAT,UA2CNO,IApCgB,SAAC,GAAD,IAC7BZ,EAD6B,EAC7BA,MACAa,EAF6B,EAE7BA,KACAZ,EAH6B,EAG7BA,IACAa,EAJ6B,EAI7BA,YACAC,EAL6B,EAK7BA,sBACAX,EAN6B,EAM7BA,YAN6B,IAO7BY,YAP6B,MAOtB,GAPsB,SAS7B,yBAAK1B,UAAU,kBACb,yBAAKA,UAAU,eACZwB,GACC,kBAACP,EAAD,CACEN,IAAKA,EACLI,MAAOS,EACPN,gBAAiBO,GAAyB,WAG9C,yBAAKzB,UAAU,QACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,SACb,0BAAMA,UAAU,QAAQuB,EAAKI,MAAM,KAAK,IACvCD,EAAKrB,KAAI,SAACuB,GAAD,OACR,kBAAC,IAAD,CAAKA,KAAMA,EAAMpB,IAAKoB,QAG1B,kBAAC,OAAD,CAAMT,GAAIR,GACR,wBAAIX,UAAU,SAASU,GACvB,2BAAII","file":"component---src-templates-tag-tsx-e12c5f5f7077bdb42f6c.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport Card from '../components/Card';\nimport SEO from '../components/SEO';\nimport Sidebar from '../components/Sidebar';\n\nconst TagPage: React.FC<{ data: any; pageContext: any }> = ({ data, pageContext }) => {\n    const { edges } = data.allMarkdownRemark;\n    const { tag } = pageContext;\n    return (\n        <div className=\"container\">\n            <div\n                className=\"row\"\n                style={{\n                    margin: 15,\n                }}\n            >\n                <Sidebar/>\n\n                <div className=\"col-xl-10 col-lg-7 col-md-12 col-xs-12 order-2\">\n                    <div\n                        className=\"col-12\"\n                        style={{\n                            fontSize: 20,\n                            margin: 15,\n                        }}\n                    >\n                        {edges.length}\n                        &nbsp;Articles in&nbsp;\n                        {tag}\n                    </div>\n                    {edges.map(({ node }: { node: any }) => (\n                        <Card {...node.frontmatter} key={node.id}/>\n                    ))}\n                </div>\n\n                <div className=\"col-xl-2 col-lg-1 order-3\"/>\n            </div>\n\n            <SEO\n                title={tag}\n                url={`/tag/${tag}`}\n                siteTitleAlt=\"Extracold's Blog\"\n                isPost={false}\n                description={tag}\n                image=\"/assets/profile-250x250.jpg\"\n            />\n        </div>\n    );\n};\n\nexport default TagPage;\n\n/**\n * useStaticQuery 의 limitation - variable 주입이 안됨\n */\nexport const pageQuery = graphql`\n  query tagQuery($tag: [String!]) {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: frontmatter___date }\n      filter: { frontmatter: { tags: { in: $tag } } }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            id\n            url: slug\n            title\n            date\n            tags\n            headerImage\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport Tag from '../Tag';\n\nimport './index.scss';\n\ninterface IProps {\n  title: string;\n  date: string;\n  url: string\n  headerImage?: string\n  headerBackgroundColor?: string;\n  description?: string;\n  tags?: string[];\n}\n\nconst CardHeader: React.FC<{url: string, image: string; backgroundColor: string}> = ({ url, image, backgroundColor }) => (\n  <Link to={url}>\n    <div className=\"wrapper\" style={{\n      backgroundSize: 'cover',\n      backgroundColor: `#${backgroundColor}`,\n      backgroundImage: `url(${image})`,\n    }}/>\n  </Link>\n);\n\n// @ts-ignore\n// @ts-ignore\nconst Card: React.FC<IProps> = ({\n  title,\n  date,\n  url,\n  headerImage,\n  headerBackgroundColor,\n  description,\n  tags = [],\n}) => (\n  <div className=\"col-sm-12 pb-4\">\n    <div className=\"custom-card\">\n      {headerImage && (\n        <CardHeader\n          url={url}\n          image={headerImage}\n          backgroundColor={headerBackgroundColor || 'FFFFFF'}\n        />\n      )}\n      <div className=\"data\">\n        <div className=\"content\">\n          <div className=\"stats\">\n            <span className=\"date\">{date.split('T')[0]}</span>\n            {tags.map((name: string) => (\n              <Tag name={name} key={name}/>\n            ))}\n          </div>\n          <Link to={url}>\n            <h4 className=\"title\">{title}</h4>\n            <p>{description}</p>\n          </Link>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Card;\n"],"sourceRoot":""}