{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2019/11/29/2019-memoirs","result":{"data":{"content":{"edges":[{"node":{"id":"0b2b0c1e-5b79-59b6-a5a0-4e3d37d87ea6","html":"<blockquote>\n<p>출처 : <a href=\"https://codeburst.io/javascript-generator-yield-next-async-await-e428b0cb52e4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://codeburst.io/javascript-generator-yield-next-async-await-e428b0cb52e4</a>\n문제 및 오역은 댓글로 달아주시면 처리하도록 하겠습니다.</p>\n</blockquote>\n<p align=\"center\">. . .</p>\n<h1 id=\"generator-es6--\"><a href=\"#generator-es6--\" aria-label=\"generator es6   permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generator (ES6) -</h1>\n<blockquote>\n<p>generator 함수는 사용자의 요구에 따라 다른 시간대에 다양한 결과 값을 제공해주며,\n그 내부 상태 또한 관리할 수 있는 함수입니다.\ngenerator 함수는 <code class=\"language-text\">function*</code> 문법을 통해 사용할 수 있습니다.</p>\n</blockquote>\n<p>제너레이터 함수와 일반 함수의 차이점은 단일 실행에서 완료까지 실행됨에 있어,<br>\n제너레이터 함수는 <strong>로직을 일시정지하거나, 재개할 수 있다</strong> 는 점에서 차이가 있습니다.\n로직은 그대로 실행되지만 그 트리거는 우리가 그대로 가지고 있는 셈이죠.</p>\n<p>제너레이터 함수는 비동기를 제어하는데 좀 더 좋을 수 있어도, 동기 로직에 대해서도 좋은 문법이라고 할 수는 없습니다.</p>\n<blockquote>\n<p>Note: 제너레이터 함수가 실행되면 새로운 제너레이터 객체를 반환합니다.</p>\n</blockquote>\n<p>일시정지와 재개는 <code class=\"language-text\">yield</code> &#x26; <code class=\"language-text\">next</code> 키워드를 통해 수행됩니다.\n이제 이 키워드들이 무엇이고, 어떤 일을 하는지 살펴봅시다.</p>\n<h1 id=\"yieldnext--\"><a href=\"#yieldnext--\" aria-label=\"yieldnext   permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Yield/Next -</h1>\n<blockquote>\n<p><code class=\"language-text\">yield</code> 키워드는 제너레이터 함수를 일시정지 시키고, <code class=\"language-text\">yield</code> 키워드가 들어간 표현식 우측값의 결과값을 함수를 호출한 측에게 반환합니다.\n이 키워드는 제너레이터 버전의 <code class=\"language-text\">return</code> 키워드라고 생각하면 되겠네요.</p>\n</blockquote>\n<p><code class=\"language-text\">yield</code> 키워드는 엄밀히 말하면 <code class=\"language-text\">value</code> 와 <code class=\"language-text\">done</code> 속성을 가진 <code class=\"language-text\">IteratorResult</code> 오브젝트를 반환합니다. (<a href=\"https://codeburst.io/javascript-es6-iterables-and-iterators-de18b54f4d4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">iterators 와 iterable 에 대해 모른다면 이걸 읽어보세요</a>)</p>\n<blockquote>\n<p>한번 <code class=\"language-text\">yield</code> 표현식에 의해 일시정지되면, 제너레이터의 next() 가 호출될때까지 일시정지 상태를 유지합니다.\n제너레이터의 next() 함수가 실행될 때마다 로직을 재개하고 <a href=\"https://codeburst.io/javascript-es6-iterables-and-iterators-de18b54f4d4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">iterator</a> 결과를 반환합니다.</p>\n</blockquote>\n<p>음.. 이론은 이정도면 충분할 것 같네요. 이제 예제를 한번 살펴보도록 하죠</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">UUIDGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> d<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token string\">'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[xy]/g</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">16</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            d <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">/</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token string\">'x'</span> <span class=\"token operator\">?</span> r <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">&amp;</span><span class=\"token number\">0x3</span><span class=\"token operator\">|</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>여기 보이는 UUIDGenerator 함수는 현재 시간과 랜덤숫자를 시드로 사용해 UUID 를 계산하고, 매 실행마다 새로운 UUID 를 반환하는 제너레이터 함수입니다.</p>\n<p>위 함수를 실행시키려면 next() 함수를 호출할 수 있는 제너레이터 객체를 만들어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">UUID</span> <span class=\"token operator\">=</span> <span class=\"token function\">UUIDGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// UUID 는 제너레이터 객체입니다.</span>\n<span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// return {value: 'e35834ae-8694-4e16-8352-6d2368b3ccbf', done: false}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>UUID.next() 는 매 UUID.next() 마다 새로운 UUID 를 반환할 것이고, done 은 함수가 무한루프이기 때문에 언제나 false 일 것입니다.</p>\n<blockquote>\n<p>Note: 우리는 무한루프 상태인 상태 위에서 일시정지시켰습니다.\n제너레이터 로직 아무데서나 '일시정지 점' 을 만들 수 있다는건 굉장한 부분이죠.<br>\n뿐만 아니라 외부에 값을 반환할 수도있고, 반대로 외부에서 값을 받을 수도 있습니다.</p>\n</blockquote>\n<p>위와 같이 실제로 제너레이터를 통한 구현체가 꽤 많으며, 큰 비중으로 사용중인 라이브러리도 있습니다. <a href=\"https://github.com/tj/co\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">co</a>, <a href=\"https://koajs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">koa</a>, <a href=\"https://github.com/redux-saga/redux-saga\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">redux-saga</a> 가 그 예입니다.</p>\n<p align=\"center\">. . .</p>\n<h1 id=\"asyncawait-es7\"><a href=\"#asyncawait-es7\" aria-label=\"asyncawait es7 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async/Await (ES7)</h1>\n<p>일반적으로, 콜백은 <code class=\"language-text\">Promise</code> 를 사용해 처리된 데이터와 함께 비동기 작업이 반환될 때 전달 / 호출되었습니다.</p>\n<blockquote>\n<p><code class=\"language-text\">Async</code>/<code class=\"language-text\">Await</code> 은 <code class=\"language-text\">Promise</code> 를 이해하고 사용하기 쉽고 편하게만들어 주는 특별한 구문입니다.</p>\n</blockquote>\n<p><code class=\"language-text\">Async</code> 키워드는 비동기 함수를 정의하는데 사용되고, 이는 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AsyncFunction</a> 객체를 반환합니다.</p>\n<p><code class=\"language-text\">Await</code> 키워드는 Promise 가 resolve 혹은 reject 로 이행될 때까지 함수를 일시정지하는 역할을 합니다. 그 이후 로직을 재개시키죠. 로직이 재개된 경우, await 표현식은 <code class=\"language-text\">Promise</code> 의 resolve 된 결과값입니다.</p>\n<h2 id=\"key-points\"><a href=\"#key-points\" aria-label=\"key points permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key Points</h2>\n<ol>\n<li><code class=\"language-text\">Await</code> 은 무조건 async 함수 안에서만 사용 가능하다</li>\n<li>async 키워드가 붙은 함수는 언제나 Promise 를 리턴한다.</li>\n<li>여러개의 <code class=\"language-text\">await</code> 들은 언제나 한 함수안에서 위에서 아래로 차례대로 실행된다.</li>\n<li>만약 promise 가 평범하게 resolve 되었다면, <code class=\"language-text\">await promise</code> 는 그 결과를 반환한다. 에러를 던지는 reject 의 경우는 그냥 <code class=\"language-text\">throw</code> 문을 작성하면 된다.</li>\n<li>async 함수는 여러개의 promise 를 동시에 기다려주진 않는다.</li>\n<li>만약 한 구문에 꼭 순서대로 진행되야할 필요도 없는 <code class=\"language-text\">await</code> 이 계속 호출되면, 성능 이슈가 생길 수 있다.</li>\n</ol>\n<p>뭐 여기까진 괜찮네요. 그럼 간단한 예제를 하나 살펴보시죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i am resolved!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> promise<span class=\"token punctuation\">;</span> \n  <span class=\"token comment\">// wait till the promise resolves (*)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"i am resolved!\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">asyncFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">asyncFunction</code> 의 실행은 <code class=\"language-text\">await promise;</code> 라인에서 일시정지되고, promise 가 처리되면 <code class=\"language-text\">result</code> 변수에 그 결과가 할당되면서 로직이 재개됩니다.<br>\n그래서 코드는 <code class=\"language-text\">&quot;i am resolved!&quot;</code> 를 1초후에 보여주게 됩니다.</p>\n<p align=\"center\">. . .</p>\n<h1 id=\"generator-와-async-await---비교\"><a href=\"#generator-%EC%99%80-async-await---%EB%B9%84%EA%B5%90\" aria-label=\"generator 와 async await   비교 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generator 와 Async-await - 비교</h1>\n<ol>\n<li>generator/yield 와 async/await 은 둘다 '기다릴 수 있는' 비동기 로직을 작성하는데 사용됩니다. 이 말은 실제로는 비동기이지만 코드만 보면 동기처럼 보이게 해준다는걸 의미합니다.</li>\n<li>generator 함수는 <code class=\"language-text\">yield</code> 단위로 실행됩니다. 즉 함수의 iterator 에 의해(<code class=\"language-text\">next</code> 함수) 한번에 하나의 yield 문 단위로 실행되고, 반면에 async-await 의 경우는 <code class=\"language-text\">await</code> 단위의 '순서' 대로 실행됩니다.</li>\n<li>async/await 은 특정 케이스의 generator 를 구현하는데는 보다 쉽게 구현할 수 있습니다.</li>\n<li>generator 는 언제나 {value: any, done: boolean} 을 반환합니다. 반면에 async 함수는 언제나 Promise 를 반환합니다. 이는 value 가 반환되거나 아니면 에러를 throw 한다는 뜻이 됩니다.</li>\n<li>async 함수는 generator 와 promise 구현체로 분해될 수 있으며 이 점은 알아둘 만 합니다.</li>\n</ol>\n<p align=\"center\">. . .</p>\n<blockquote>\n<p>이곳은 개인 홍보이므로 따로 번역은 하지 않았습니다.</p>\n</blockquote>\n<p>Tips Are Appreciated! 💰 😉\nMy Bitcoin address: 132Ndcy1ZHs6DU4pV3q2X1GzSCdBEXX6pz\nMy Ethereum address: 0xc46204dfc8449Ffb0f02a9e1aD81F30D3f027010\nPlease consider <strong><a href=\"https://goo.gl/forms/MOPINWoY7q1f1APu2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">entering your email</a></strong> here if you’d like to be added to my email list and <strong>follow me on <a href=\"https://medium.com/@ideepak.jsd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">medium</a> to read more article on javascript and on <a href=\"https://github.com/dg92\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> to see my crazy code.</strong> If anything is not clear or you want to point out something, please comment down below.</p>","excerpt":"출처 : https://codeburst.io/javascript-generator-yield-next-async-await-e428b0cb52e4\n문제 및 오역은 댓글로 달아주시면 처리하도록 하겠습니다. Generator (ES…","fields":{"slug":"/2019/08/27/javascript-generator-yield-async-await"},"frontmatter":{"id":"javascript-generator-yield-async-await","title":"Javascript - Generator-Yield/Next & Async-Await","slug":"/2019/08/27/javascript-generator-yield-async-await","date":"2019-08-27T23:48:56.000Z","headerImage":""}},"previous":null,"next":null}]}},"pageContext":{"id":"ee09376b-0cdc-5bb0-9a82-9f829d4bdb81","index":1}}}